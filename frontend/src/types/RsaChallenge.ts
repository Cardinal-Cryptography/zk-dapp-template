/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RsaChallengeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "challenges"
      | "challengesCompleted"
      | "challengesCount"
      | "newChallenge"
      | "owner"
      | "solveChallenge"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Verified"): EventFragment;

  encodeFunctionData(
    functionFragment: "challenges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengesCompleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newChallenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "solveChallenge",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengesCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "solveChallenge",
    data: BytesLike
  ): Result;
}

export namespace VerifiedEvent {
  export type InputTuple = [user: AddressLike, challenge: BigNumberish];
  export type OutputTuple = [user: string, challenge: bigint];
  export interface OutputObject {
    user: string;
    challenge: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RsaChallenge extends BaseContract {
  connect(runner?: ContractRunner | null): RsaChallenge;
  waitForDeployment(): Promise<this>;

  interface: RsaChallengeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  challenges: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  challengesCompleted: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  challengesCount: TypedContractMethod<[], [bigint], "view">;

  newChallenge: TypedContractMethod<
    [challenge: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  solveChallenge: TypedContractMethod<
    [challenge: BigNumberish, proof: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "challenges"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengesCompleted"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "challengesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "newChallenge"
  ): TypedContractMethod<[challenge: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "solveChallenge"
  ): TypedContractMethod<
    [challenge: BigNumberish, proof: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Verified"
  ): TypedContractEvent<
    VerifiedEvent.InputTuple,
    VerifiedEvent.OutputTuple,
    VerifiedEvent.OutputObject
  >;

  filters: {
    "Verified(address,uint256)": TypedContractEvent<
      VerifiedEvent.InputTuple,
      VerifiedEvent.OutputTuple,
      VerifiedEvent.OutputObject
    >;
    Verified: TypedContractEvent<
      VerifiedEvent.InputTuple,
      VerifiedEvent.OutputTuple,
      VerifiedEvent.OutputObject
    >;
  };
}
